---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dawarich.fullname" . }}
  labels:
    {{- include "dawarich.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.dawarich.replicaCount }}
  selector:
    matchLabels:
      {{- include "dawarich.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        config-hash: {{ include (print $.Template.BasePath "/config-map.yaml") . | sha256sum }}
      labels:
        {{- include "dawarich.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dawarich.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{ include "dawarich.initContainers" . | nindent 8 }}
        {{- if .Values.postgresql.enabled }}
        - name: postgres-init
          image: bitnami/postgresql:latest
          command:
            - /bin/sh
            - -c
            - |
              set -e
              psql -d {{ .Values.postgresql.auth.database }} -c "CREATE EXTENSION IF NOT EXISTS postgis;"

              # Create queue database and grant privileges
              QUEUE_DB="{{ .Values.postgresql.auth.database }}_queue"
              QUEUE_USER="{{ .Values.postgresql.auth.username }}"
              QUEUE_DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='${QUEUE_DB}'")
              if [ "${QUEUE_DB_EXISTS}" != "1" ]; then
                psql -c "CREATE DATABASE ${QUEUE_DB};"
              fi

              psql -d postgres -v ON_ERROR_STOP=1 <<EOF
              GRANT CONNECT ON DATABASE "$QUEUE_DB" TO "$QUEUE_USER";
              GRANT CREATE ON DATABASE "$QUEUE_DB" TO "$QUEUE_USER";
              EOF

              psql -d "$QUEUE_DB" -v ON_ERROR_STOP=1 <<EOF
              DO \$\$
              DECLARE
              sch TEXT;
              BEGIN
              FOR sch IN
              SELECT nspname FROM pg_namespace
              WHERE (nspname != 'information_schema' AND nspname NOT LIKE 'pg_%')
              LOOP
              EXECUTE format('GRANT USAGE, CREATE ON SCHEMA %I TO "$QUEUE_USER";', sch);
              EXECUTE format('GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA %I TO "$QUEUE_USER";', sch);
              EXECUTE format('GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA %I TO "$QUEUE_USER";', sch);
              EXECUTE format('GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA %I TO "$QUEUE_USER";', sch);

              -- Set default privileges for future objects
              EXECUTE format('ALTER DEFAULT PRIVILEGES IN SCHEMA %I GRANT ALL PRIVILEGES ON TABLES TO "$QUEUE_USER";', sch);
              EXECUTE format('ALTER DEFAULT PRIVILEGES IN SCHEMA %I GRANT ALL PRIVILEGES ON SEQUENCES TO "$QUEUE_USER";', sch);
              EXECUTE format('ALTER DEFAULT PRIVILEGES IN SCHEMA %I GRANT ALL PRIVILEGES ON FUNCTIONS TO "$QUEUE_USER";', sch);
              END LOOP;
              END;
              \$\$;
              EOF
          env:
            - name: PGHOST
              value: {{ include "dawarich.fullname" . }}-postgresql
            - name: PGUSER
              value: postgres
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{- if .Values.postgresql.auth.existingSecret }}
                    {{ .Values.postgresql.auth.existingSecret }}
                  {{- else }}
                    {{ $.Release.Name }}-postgresql
                  {{- end }}
                  key: {{- if .Values.postgresql.auth.secretKeys.adminPasswordKey }}
                    {{ .Values.postgresql.auth.secretKeys.adminPasswordKey }}
                  {{- else }}
                    postgres-password
                  {{- end }}
            - name: DB_USER
              value: {{ .Values.postgresql.auth.username }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          command: ['web-entrypoint.sh']
          args: ['bin/rails', 'server', '-p', '3000', '-b', '::']
          envFrom:
            {{- include "dawarich.envFrom" . | nindent 12 }}
          env:
            {{- include "dawarich.env" . | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            {{- include "dawarich.livenessProbe" . | nindent 12 }}
          readinessProbe:
            {{- include "dawarich.readinessProbe" . | nindent 12 }}
          startupProbe:
            {{- include "dawarich.startupProbe" . | nindent 12 }}
          resources:
            {{- toYaml .Values.dawarich.resources | nindent 12 }}
          volumeMounts:
            {{- include "dawarich.volumeMounts" . | trim | nindent 12 }}
      volumes:
        {{- include "dawarich.volumes" . | trim | nindent 8 }}
      {{- with .Values.dawarich.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dawarich.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.dawarich.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
